name: Puppeteer DocServer test

on:
  workflow_dispatch:

jobs:
  puppeteer-docserver:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Checkout main repository Dep.Tests
        uses: actions/checkout@v4
        with:
          repository: ONLYOFFICE-data/Dep.Tests
          path: Dep.Tests
          token: ${{ secrets.READ_PAT }}

      - name: Setup Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          git config --global url."https://${{ secrets.READ_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Init specific submodule
        run: |
          cd Dep.Tests
          git submodule update --init --depth 1 puppeteer/files

      - name: Add reports key to config
        run: |
          node -e "
            const fs = require('fs');
            const filePath = 'Dep.Tests/tools/report_portal/config.json';
            const config = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            
            config.api_key = '${{ secrets.REPORT_KEY }}';
            config.project_name = 'docsserver';
            config.launch_name = 'Github Action ${{ matrix.os }} Chrome';
            
            fs.writeFileSync(filePath, JSON.stringify(config, null, 2));
          "

      - name: Set headless mode for linux
        if: matrix.os == 'ubuntu-22.04'
        run: |
          node -e "
            const fs = require('fs');
            const filePath = 'Dep.Tests/puppeteer/config_chrome_linux.json';
            const config = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            
            config.puppeteerOptions.headless = true;
            
            fs.writeFileSync(filePath, JSON.stringify(config, null, 2));
          "

      - name: Install dependencies and configure Puppeteer sandbox
        run: |
          cd Dep.Tests/puppeteer/engine
          
          # Install dependencies
          npm install

          # Configure Puppeteer sandbox with https://pptr.dev/troubleshooting#issues-with-apparmor-on-ubuntu
          if: matrix.os == 'ubuntu-latest'
            # cd to Puppeteer cache directory (adjust the path if using a different cache directory)
            CHROME_VERSION=$(ls ~/.cache/puppeteer/chrome/linux-* -d 2>/dev/null | head -n 1 | xargs basename 2>/dev/null || echo "")
            if [ -z "$CHROME_VERSION" ]; then
              echo "Chrome not installed yet, will be configured after npm install"
            else
              cd ~/.cache/puppeteer/chrome/$CHROME_VERSION/chrome-linux64/
              sudo chown root:root chrome_sandbox
              sudo chmod 4755 chrome_sandbox
              # copy sandbox executable to a shared location
              sudo cp -p chrome_sandbox /usr/local/sbin/chrome-devel-sandbox
            fi
            # export CHROME_DEVEL_SANDBOX env variable
            echo "CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox" >> $GITHUB_ENV

      - name: Run tests
        run: |
          cd Dep.Tests/puppeteer/engine
          python run.py --disable_animation

      - name: Send message to telegram
        if: always()
        shell: bash
        env:
          MESSAGE: |
            Workflow: ${{ github.workflow }}
            Github job: ${{ github.job }}
            Github job status: ${{ job.status == 'success' && '✅' || job.status == 'failure' && '❌' || '❓' }} - ${{ job.status }}
            
            See action run logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g')
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_TO }}\",
            \"text\": \"$MESSAGE\",
            \"parse_mode\": \"Markdown\",
            \"disable_notification\": true,
            \"disable_web_page_preview\": true
          }"
